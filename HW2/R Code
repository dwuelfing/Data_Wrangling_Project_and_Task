
install.packages("tidyverse")
install.packages("sqldf")
install.packages("RODBC")

library(tidyverse)
library(sqldf)
library("RODBC")

myconn<-odbcConnect("dartmouth","dwuelfing","passwordgoeshere")

#Copying tables to manipulate
sqlQuery(myconn,"select * into [dwuelfing].phonecall from [qbs181].dbo.phonecall")
sqlQuery(myconn,"select * into [dwuelfing].phonecall_encounter from [qbs181].dbo.phonecall_encounter")
sqlQuery(myconn,"select * into [dwuelfing].callduration from [qbs181].dbo.callduration")
sqlQuery(myconn,"select * into [dwuelfing].textmessages from [qbs181].dbo.textmessages")

#Adding new column in SQL
sqlQuery(myconn, "Alter table [dwuelfing].phonecall Add EnrollmentGroup nvarchar(50)")

#Updating phonecall table based on phonecall_encounter codes
sqlQuery(myconn, "update [dwuelfing].phonecall
set [dwuelfing].Phonecall.EnrollmentGroup = PhoneCall_Encounter.encountercode
from [dwuelfing].Phonecall 
inner join phonecall_encounter 
on [dwuelfing].PhoneCall.tri_CustomerIDEntityReference = PhoneCall_Encounter.CustomerId")

#Updating codes to be specified strings
sqlQuery(myconn, "
Update [dwuelfing].phonecall
set EnrollmentGroup = 
case when 
EnrollmentGroup = '125060000' then 'Clinical Alert'
when EnrollmentGroup = '125060001' then 'Health Coaching'
when EnrollmentGroup = '125060002' then 'Technical Question'
when EnrollmentGroup = '125060003' then 'Administrative'
when EnrollmentGroup = '125060004' then 'Other'
when EnrollmentGroup = '125060005' then 'Lack of Engagement'
end")

#Saving table results to a data frame, to easily display results in R!
EnrollmentGroups<-sqlQuery(myconn,"select EnrollmentGroup, * from dwuelfing.phonecall")
head(EnrollmentGroups,10)

#Saving counts of each enrollment type to a data frame in R
EnrollmentGroupCounts<-sqlQuery(myconn, "select EnrollmentGroup,  RecordsCount = count(*) from dwuelfing.phonecall
where Enrollmentgroup <> '' group by EnrollmentGroup order by 1 asc")
head(EnrollmentGroupCounts, 10)

#SQL join on phonecall_encounter and callduration
joinedresult<-sqlQuery(myconn, "
select A.*, B.* from PhoneCall_Encounter A
inner join CallDuration B 
on A.customerid = B.tri_CustomerIDEntityReference")
head(joinedresult,10)

#Joined phonecall and callduration tables in SQL and saved them into a data frame in R
Callsummary<-sqlQuery(myconn, "select  B.Calltype, CallTypeCount = count(B.Calltype), B.CallOutcome, 
OutcomeCount= count(B.calloutcome), 
AvgCallDuration = Avg(CAST(B.CallDuration as int))
from [dwuelfing].phonecall A
inner join [dwuelfing].CallDuration B
on A.tri_CustomerIDEntityReference = B.tri_CustomerIDEntityReference
and A.CallDuration = B.CallDuration
group by B.calloutcome, B.calltype
Order by 1,3")

#Updated labels for call types and call outcomes in R
Callsummary$Calltype<- ifelse(Callsummary$Calltype == 1,"Inbound","Outbound")
Callsummary$CallOutcome<- ifelse(Callsummary$CallOutcome == 1,"No Response",ifelse(Callsummary$CallOutcome ==2, 
"Left Voicemail", "Successful"))

#called head to show results!
head(Callsummary)

#Joined Demographics, Conditions and TextMessages tables in SQL
joined<-sqlQuery(myconn,
"select * from textmessages T 
inner join conditions C on 
T.tri_contactid = C.tri_patientid
inner join Demographics D on T.tri_contactid = D.contactid")

#saved to data frame to show joined table results
head(joined,10)

#Added a Week column in TextMessages table to facilitate text per week comparison
sqlQuery(myconn, "alter table [dwuelfing].Textmessages
add  Week nvarchar(50)
select * from [dwuelfing].Textmessages")

#Populated new Week column to display which week each text was sent in (Week 0 is 3/1/16, the date of the first text sent)
sqlQuery(myconn, "Update dwuelfing.TextMessages set Week = 
datediff(ww, '3/1/16', textsentdate)")

#wrote my SQL query into a data frame in R so I can show 10 results and plot.
textsperweek<-sqlQuery(myconn,
"select SenderName = sendername, Week, NumberofTexts=count(tri_contactid) from dwuelfing.textmessages T
group by week, sendername
order by 2")
head(textsperweek,10)

ggplot(data=textsperweek, aes(x=Week, y=NumberofTexts, color=SenderName)) +
  geom_bar(stat="identity", fill="White")

#filtered in SQL to look at just texts associated with patients who had diabetes, and saved to a data frame in R
diabetestextsperweek<-sqlQuery(myconn,
"select SenderName = sendername, Week, NumberofTexts=count(tri_contactid) from dwuelfing.textmessages where tri_contactid in
(select distinct(tri_patientid) from dwuelfing.conditions where tri_name = 'Diabetes')
group by week, sendername
order by 2")
head(diabetestextsperweek,10)

#Visual:
myconn<-odbcConnect("dartmouth","dwuelfing","dwuelfing@qbs181")
ggplot(data=diabetestextsperweek, aes(x=Week, y=NumberofTexts, color=SenderName)) +
  geom_bar(stat="identity", fill="White")
